# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Local Costmap
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

static_map: false

# Sequence of plugin specifications, one per layer.
# Each specification is a dictionary with name and type fields.
# The name is used to define the parameter namespace for the plugin.
plugins:
- {name: static_layer, type: 'costmap_2d::StaticLayer'}
- {name: obstacle_layer, type: 'costmap_2d::ObstacleLayer'}
- {name: inflation_layer, type: 'costmap_2d::InflationLayer'}


# Coordinate frame and tf parameters
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# The global frame for the costmap to operate in.
# (string, default: "/map")
global_frame: /odom


# Rate parameters
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# The frequency in Hz for the map to be updated. 
# update_frequency (double, default: 5.0)
update_frequency: 4.0

# The frequency in Hz for the map to be publish display information. 
# publish_frequency (double, default: 0.0)
publish_frequency: 4.0


# Map management parameters
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# Whether or not to use a rolling window version of the costmap. If the 
# static_map parameter is set to true, this parameter must be set to false. 
# rolling_window (bool, default: false)
rolling_window: true

# If true the full costmap is published to "~<name>/grid" every update. If 
# false only the part of the costmap that has changed is published on the 
# "~<name>/grid_updates" topic. 
# always_send_full_costmap (bool, default: false)
always_send_full_costmap: false
    
# The following parameters can be overwritten by some layers, namely the 
# static map layer:
#
# - The width of the map in meters.           (int, default: 10)
# - The height of the map in meters.          (int, default: 10)
# - The resolution of the map in meters/cell. (double, default: 0.05)
# - The x origin of the map in the global frame in meters. (double, default: 0.0)
# - The y origin of the map in the global frame in meters. (double, default: 0.0)
# 
width: 4
height: 4
resolution: 0.08
origin_x: 0.0
origin_y: 0.0



# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Static Obstacles Layer
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
static_layer:
  map_topic: "map"
  first_map_only: true
  subscribe_to_updates: false
  track_unknown_space: true
  use_maximum: true
  trinary_costmap: true


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Common Costmap Parameters
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

map_type: costmap # (ahora "voxel" es el default.. de hecho, "costmap" ya no esta documentado)
robot_radius: 0.33
footprint_padding: 0.01
# footprint: [[-0.30,-0.33],[-0.30,0.33],[0.2,0.33],[0.27,0],[0.2,-0.33]]
# footprint_topic: /maqui/nav/footprint


# Coordinate frame and tf parameters
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

# The name of the frame for the base link of the robot.
# robot_base_frame (string, default: "base_link")
robot_base_frame: /base_footprint

#   Specifies the delay in transform (tf) data that is tolerable in seconds.
#   This parameter serves as a safeguard to losing a link in the tf tree while
# still allowing an amount of latency the user is comfortable with to exist 
# in the system. For example, a transform being 0.2 seconds out-of-date may
# be tolerable, but a transform being 8 seconds out of date is not.
#   If the tf transform between the coordinate frames specified by the 
# global_frame and robot_base_frame parameters is transform_tolerance seconds
# older than ros::Time::now(), then the navigation stack will stop the robot. 
# transform_tolerance (double, default: 0.2)
transform_tolerance: 0.5


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Inflation Layer
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
inflation_layer:
  enabled: true

  # = = = = = = = = = = = = = = = = = = 
  # VERY IMPORTANT PARAMETER!: max radius at which inflate point obstacles p in P. 
  # if a point X is between  p and the robot circunscribed region CR, then the obstacle is inflated as a "possibly collision"
  # else if X is between the CR and "inflation_radius", then the obstacle is inflated as "definitely not in collision", 
  # but with a cost decay as function of distance to the inscribed region.
  # THIS MEANS: set this parameter > radius(CR) to advise the planner not to getting so close to obstacles.
  # more info on: http://wiki.ros.org/costmap_2d
  #
  # There is a matlab script to plot the decay behavior vs. inflation_radius and cost_scaling_factor
  # > plotCostmapCostDecay(0.4, 0.5, 1.5, [0.5 1 2 5 10])
  # see: uchile_navigation_utils/scripts/. 
  # = = = = = = = = = = = = = = = = = = 

  # The radius in meters to which the map inflates obstacle cost values. 
  # inflation_radius (double, default: 0.55)
  inflation_radius: 0.3

  # A scaling factor to apply to cost values during inflation. The cost 
  # function is computed as follows for all cells in the costmap further
  # than the inscribed radius distance and closer than the inflation radius
  # distance away from an actual obstacle:
  #    exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1)
  # where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254.
  # NOTE: since the cost_scaling_factor is multiplied by a negative in the
  # formula, increasing the factor will decrease the resulting cost values. 
  # (double, default: 10.0)
  cost_scaling_factor: 1


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Obstacle Layer
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
obstacle_layer:

  enabled: 1
  combination_method: 1

  # Sensor management parameters
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

  # A list of observation source names separated by spaces. This defines each
  # of the <source_name> namespaces defined below. 
  # (string, default: "")
  #
  # this is handled at launchfile level. see move_base.launch.xml
  #
  observation_sources: "laser_sensor rgbd_scan_sensor"
  # observation_sources: "laser_sensor rgbd_scan_sensor"
  
  # How long to keep each sensor reading in seconds. A value of 0.0 will only
  # keep the most recent reading. 
  # <source_name>/observation_persistence (double, default: 0.0)
  #
  # How often to expect a reading from a sensor in seconds. A value of 0.0 will
  # allow infinite time between readings.
  # <source_name>/expected_update_rate (double, default: 0.0)
  #
  # The maximum range in meters at which to insert obstacles into the costmap 
  # using sensor data. 
  # <source_name>/obstacle_range (double, default: 2.5)
  #
  # The maximum range in meters at which to raytrace out obstacles from the map
  # using sensor data. 
  # <source_name>/raytrace_range (double, default: 3.0)
  #
  # Allows for Inf values in "LaserScan" observation messages. The Inf values 
  # are converted to the laser maximum range. 
  # <source_name>/inf_is_valid (bool, default: false)

  # required to work
  laser_sensor: {
    sensor_frame: /base_footprint,
    data_type: LaserScan,
    topic: /maqui/laser,
    expected_update_rate: 1.0,
    observation_persistence: 0.0,
    marking: true,
    clearing: true,
    obstacle_range: 0.3,
    raytrace_range: 0.3,
    min_obstacle_height: -1.0,
    max_obstacle_height: 1.5,
    inf_is_valid: true
  }

  rgbd_scan_sensor: {
    sensor_frame: /laser_virtual,
    data_type: LaserScan,
    topic: /virtual_scan,
    expected_update_rate: 1.0,
    observation_persistence: 0.0,
    marking: true,
    clearing: true,
    obstacle_range: 1.0,
    raytrace_range: 5.0,
    min_obstacle_height: -1.5,
    max_obstacle_height: 1.5,
    inf_is_valid: true
  }  



  # Global Filtering Parameters
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # These parameters apply to all sensors.

  # The maximum height of any obstacle to be inserted into the costmap in 
  # meters. This parameter should be set to be slightly higher than the 
  # height of your robot. 
  # max_obstacle_height (double, default: 2.0)
  max_obstacle_height: 1.4 # robot with arms up

  # The default maximum distance from the robot at which an obstacle will 
  # be inserted into the cost map in meters. This can be over-ridden on 
  # a per-sensor basis. 
  # obstacle_range (double, default: 2.5)

  # The default range in meters at which to raytrace out obstacles from the 
  # map using sensor data. This can be over-ridden on a per-sensor basis. 
  # raytrace_range (double, default: 3.0)

  # ObstacleCostmapPlugin
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # These parameters are used by the ObstacleCostmapPlugin.

  # If false, each pixel has one of 2 states: lethal obstacle or free. If
  # true, each pixel has one of 3 states: lethal obstacle, free, or unknown. 
  # track_unknown_space (bool, default: false)
  track_unknown_space: false

  # If true, the robot footprint will clear (mark as free) the space in
  # which it travels. 
  # footprint_clearing_enabled (bool, default: true)
  footprint_clearing_enabled: true


  # VoxelCostmapPlugin
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
  # The following parameters are used by the VoxelCostmapPlugin.

  # The z origin of the map in meters. 
  # origin_z (double, default: 0.0)

  # The z resolution of the map in meters/cell. 
  # z_resolution (double, default: 0.2)

  # The number of voxels to in each vertical column, the height of the grid 
  # is z_resolution * z_voxels. 
  # z_voxels (int, default: 10)

  # The number of unknown cells allowed in a column considered to be "known" 
  # unknown_threshold (int, default: ~<name>/z_voxels)

  # The maximum number of marked cells allowed in a column considered to 
  # be "free". 
  # mark_threshold (int, default: 0)

  # Whether or not to publish the underlying voxel grid for visualization 
  # purposes. 
  # publish_voxel_map (bool, default: false)

  # If true, the robot footprint will clear (mark as free) the space in which 
  # it travels.
  # footprint_clearing_enabled (bool, default: true)

